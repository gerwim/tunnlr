// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tunnlr.Client.Persistence;

#nullable disable

namespace Tunnlr.Client.Web.Persistence.Migrations
{
    [DbContext(typeof(TunnlrClientDbContext))]
    [Migration("20231120220840_AddInterceptors")]
    partial class AddInterceptors
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("Tunnlr.Client.Persistence.Models.InterceptorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TunnelIdRequestInterceptor")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TunnelIdResponseInterceptor")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Values")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TunnelIdRequestInterceptor");

                    b.HasIndex("TunnelIdResponseInterceptor");

                    b.ToTable("Interceptors");
                });

            modelBuilder.Entity("Tunnlr.Client.Persistence.Models.ReservedDomain", b =>
                {
                    b.Property<string>("Domain")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TunnelId")
                        .HasColumnType("TEXT");

                    b.HasKey("Domain");

                    b.HasIndex("TunnelId")
                        .IsUnique();

                    b.ToTable("ReservedDomains");
                });

            modelBuilder.Entity("Tunnlr.Client.Persistence.Models.Tunnel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetUri")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tunnels");
                });

            modelBuilder.Entity("Tunnlr.Client.Persistence.Models.InterceptorEntity", b =>
                {
                    b.HasOne("Tunnlr.Client.Persistence.Models.Tunnel", null)
                        .WithMany("RequestInterceptors")
                        .HasForeignKey("TunnelIdRequestInterceptor");

                    b.HasOne("Tunnlr.Client.Persistence.Models.Tunnel", null)
                        .WithMany("ResponseInterceptors")
                        .HasForeignKey("TunnelIdResponseInterceptor");
                });

            modelBuilder.Entity("Tunnlr.Client.Persistence.Models.ReservedDomain", b =>
                {
                    b.HasOne("Tunnlr.Client.Persistence.Models.Tunnel", "Tunnel")
                        .WithOne("ReservedDomain")
                        .HasForeignKey("Tunnlr.Client.Persistence.Models.ReservedDomain", "TunnelId");

                    b.Navigation("Tunnel");
                });

            modelBuilder.Entity("Tunnlr.Client.Persistence.Models.Tunnel", b =>
                {
                    b.Navigation("RequestInterceptors");

                    b.Navigation("ReservedDomain");

                    b.Navigation("ResponseInterceptors");
                });
#pragma warning restore 612, 618
        }
    }
}
