@page "/tunnels/{id:guid}/requests"
@using Tunnlr.Client.Core.Models
@using Tunnlr.Client.Core.Services
@using Tunnlr.Client.Core.Helpers
@using Microsoft.AspNetCore.WebUtilities
@implements IDisposable

<PageTitle>Tunnlr</PageTitle>
<MudContainer MaxWidth="MaxWidth.False" Class="pt-8">

    <h3>Requests</h3>

    @if (Tunnel is null)
    {
        <div>
            <p>Tunnel is not active.</p>
        </div>
        
        return;
    }
    
    <MudContainer Class=" d-flex flex-column align-end mr-0 pr-0 pb-2">
        <MudButton Variant="Variant.Outlined"
                   EndIcon="@Icons.Material.Filled.Clear"
                   Color="Color.Tertiary"
                   OnClick="@ClearRequests"
                   >
            Clear requests
        </MudButton>
    </MudContainer>
    <MudStack Row="true" Justify="Justify.SpaceEvenly" AlignItems="AlignItems.Stretch">
        <MudPaper Class="pe-4 overflow-y-scroll" Width="50%" MaxWidth="50%" Style="height: 85vh;">
            <MudList Clickable="true" @bind-SelectedValue="selectedValue" Color="Color.Primary">
                @foreach (var tunnelHttpRequest in Tunnel.Requests.ToArray().OrderByDescending(x => x.Key.DateTime))
                {
                    <MudListItem @key="tunnelHttpRequest.Key.HttpRequest.Id" Value="tunnelHttpRequest.Key">
                        <MudGrid>
                            <MudItem xs="10">
                                <MudText Color="Color.Primary">@tunnelHttpRequest.Key.Title</MudText>
                                @if (!string.IsNullOrWhiteSpace(tunnelHttpRequest.Key.SubTitle))
                                {
                                    <MudText Typo="Typo.subtitle2" Style="color: rgba(97, 97, 97, 0.6);">@tunnelHttpRequest.Key.SubTitle</MudText>
                                }
                            </MudItem>
                            <MudItem xs="2">
                            @if (tunnelHttpRequest.Value is null)
                            {
                                <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true"/>
                            }
                            else
                            { 
                                var color = tunnelHttpRequest.Value.HttpResponse.StatusCode is >= 200 and <= 299 ? Color.Success : Color.Error;
                                
                                <MudText Color="@color">@tunnelHttpRequest.Value.HttpResponse.StatusCode - @ReasonPhrases.GetReasonPhrase(tunnelHttpRequest.Value.HttpResponse.StatusCode)</MudText>
                                <MudText Color="@color">@($"{Helpers.RequestDurationFormatter.FormatRequestDuration(tunnelHttpRequest.Key.DateTime, tunnelHttpRequest.Value.DateTime)}")</MudText>
                            }
                            </MudItem>
                        </MudGrid>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
        @if (selectedValue is Request request && Tunnel.Requests.TryGetValue(request, out var response))
        {
            <MudPaper Class="pe-4 overflow-y-scroll" Width="50%" MaxWidth="50%" Style="height: 85vh;">
                <h2>@request.Title</h2>
                <MudTabs Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                    <MudTabPanel Text="Request headers">
                        <MudSimpleTable Dense Hover Style="overflow-x: auto;">
                            <tbody>
                            @foreach (var row in request.HttpRequest.Headers)
                            {
                                <tr>
                                    <td><b>@row.Key</b></td>
                                    <td>@row.Value</td>
                                </tr>
                            }
                            </tbody>
                        </MudSimpleTable>
                    </MudTabPanel>
                    <MudTabPanel Text="Request body">
                        <pre style="overflow-x: auto; white-space: pre-wrap;"><code>@request.Body.ToArray().GetBody(request.HttpRequest.Headers)</code></pre>
                    </MudTabPanel>
                </MudTabs>
                @if (response is not null)
                {
                    <h2>Statuscode: @response.HttpResponse.StatusCode</h2>
                    <MudTabs Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                        <MudTabPanel Text="Response headers">
                            <MudSimpleTable Dense Hover Style="overflow-x: auto;">
                                <tbody>
                                @foreach (var row in response.HttpResponse.Headers)
                                {
                                    <tr>
                                        <td><b>@row.Key</b></td>
                                        <td>@row.Value</td>
                                    </tr>
                                }
                                </tbody>
                            </MudSimpleTable>
                        </MudTabPanel>
                        <MudTabPanel Text="Response body">
                            <pre style="overflow-x: auto; white-space: pre-wrap;"><code>@response.Body.ToArray().GetBody(response.HttpResponse.Headers)</code></pre>
                        </MudTabPanel>
                    </MudTabs>
                }
            </MudPaper>
        }
    </MudStack>
</MudContainer>

@code {
    [Parameter]
    public Guid Id { get; set; }

    public Tunnel? Tunnel { get; set; }

    protected override Task OnInitializedAsync()
    {
        Tunnel = TunnelService.ActiveTunnels.FirstOrDefault(x => x.Key == Id).Value;
        if (Tunnel is not null) Tunnel.ChangedEvent += OnTunnelStateChange;

        return Task.CompletedTask;
    }

    object? selectedValue;
    
    private void OnTunnelStateChange(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }
    
    public void Dispose()
    {
        if (Tunnel is not null) Tunnel.ChangedEvent -= OnTunnelStateChange;
    }
    
    /// <summary>
    /// Clears completed requests.
    /// </summary>
    private void ClearRequests()
    {
        var completedRequests = Tunnel?.Requests.Where(x => x.Value is not null).ToArray() ?? Array.Empty<KeyValuePair<Request, Response?>>();

        foreach (var request in completedRequests)
        {
            Tunnel?.Requests.TryRemove(request);
        }
    }
}